<?php

class Comments_Controller extends Controller
{
    public function __construct()
    {
        parent::__construct();
        $this->template->title = "easyshop - Komentarz";
    }
    public function index()
    {
        $this->view();
    }


    public function comment($id)
    {
        $query = ORM::factory("comment")->find($id);
        if ($query->count_last_query() < 1)
        {
            $this->template->title .= ' - nie znaleziono Komenatarza';
            $this->template->content = View::factory('comments/notexist');
        }
        else
        {
            $this->template->content = View::factory('comments/comment')->set(array(
                                                                               'comment' =>$query,
                                                                               'product' =>ORM::factory('product',$query->product_id)->find()->title
                                                                               )
                                                                            );
        }
    }

    public function add($id)
    {

        if (!$this->_user())
        {
            return;
        }
        $_POST = Validation::factory($_POST)
        ->add_rules('body', 'required');
        if ($_POST->validate())
        {
            $comment = ORM::factory('comment');
            $comment->body = $_POST['body'];
            $comment->product_id = $id;
            $comment->user_id = $this->session->get("id");
            $comment->date = time();
            $comment->save();
            $this->session->set_flash('user_message', 'Dodano komentarz do produktu');
            url::redirect('products/product/'.$id);
        } else
        {
            return;
        }
    }
    public function delete($id)
    {

        if (!$this->_user())
        {
            return;
        }
        $comment = ORM::factory('comment')->find($id);
        if ($comment->count_last_query() < 1)
        {
            $this->session->set_flash('user_message', 'Nie ma takiego komentarza w bazie.');
            url::redirect();
        }
        else
        {
            $comment->delete();
            $this->session->set_flash('user_message', 'Usunieto komentarz nr '.$id);
            url::redirect();
        }
    }

    public function edit($id)
    {
        if ($this->_user() !== 'admin' and $this->session->get('id') !== ORM::factory('comment')->find($id)->user_id)
        {
            url::redirect();
            return;
        }
        $comment = ORM::factory('comment')->find($id);
        if ($comment->count_last_query() < 1)
        {
            $this->session->set_flash('user_message', 'Nie ma takiego komentarza w bazie.');
            url::redirect();
        }
        $_POST = Validation::factory($_POST)
        ->add_rules('body', 'required');
        if ($_POST->validate())
        {
            $comment = ORM::factory('comment',$id);
            $comment->body = $_POST['body'];
            $comment->user_id = $this->session->get("id");
            $comment->date = time();
            $comment->save($id);
            $this->session->set_flash('user_message', 'Zapisano zmiany w komentarzu do produktu');
            url::redirect('products/product/'.$comment->product_id);
        } else
        {
            $this->template->title .= ' - Edycja';
            $this->template->content = View::factory('comments/edit')->set('comment', $comment);
            return;
        }
    }


    	public function __call($method, $arguments)
	{
		// Disable auto-rendering
		$this->auto_render = FALSE;

		// By defining a __call method, all pages routed to this controller
		// that result in 404 errors will be handled by this method, instead of
		// being displayed as "Page Not Found" errors.
		echo 'This text is generated by __call. If you expected the index page, you need to use: welcome/index/'.substr(Router::$current_uri, 8);
	}

}

