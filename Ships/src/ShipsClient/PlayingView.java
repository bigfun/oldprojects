/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PlayingView.java
 *
 * Created on 2010-01-22, 01:15:40
 */
package ShipsClient;

import javax.swing.*;
import java.awt.*;
import java.net.*;
import java.io.*;
import Basics.ShipsProtocol;

/**
 *
 * @author bigfun
 */
public class PlayingView extends javax.swing.JFrame implements ConnActionListener {

    /** Creates new form PlayingView */
    PrintWriter out;
    PlayingField playingField;
    Socket socket;
    boolean meReady, enemyReady, myTurn, doWePlay;
    int currentShotX = -1;
    int currentShotY = -1;

    public PlayingView(Socket socket) {
        meReady = false;
        enemyReady = false;
        myTurn = false;
        doWePlay = false;
        this.socket = socket;
        if (socket != null) {
            try {
                out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())), true);
            } catch (IOException ex) {
            }
        }
        playingField = new PlayingField("Nowa gra");
        initComponents();

        fieldContener.setLayout(new BoxLayout(fieldContener, BoxLayout.Y_AXIS));
        fieldContener.add(playingField);
        Integer[] values = {0, 1, 2, 3, 4};
        cmbChooser = new JComboBox(values);
        cmbChooser.setRenderer(new ComboBoxRenderer());
        cmbChooser.setMaximumRowCount(5);
        cmbChooser.setSelectedIndex(0);
        fieldContener.revalidate();
        fieldContener.repaint();
        //this.setSize(playingField.getPreferredSize());
        // playingField.setVisible(true);
        this.pack();
        this.repaint();
        playingField.getEnemyField().addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent evt) {
                enemyBoatClicked(evt);
            }
        });
        playingField.placeShips();


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fieldContener = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtChat = new javax.swing.JTextArea();
        txtMessage = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnReady = new javax.swing.JButton();
        Integer[] values = {0, 1, 2, 3, 4};
        cmbChooser = new JComboBox(values);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Okręty");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        fieldContener.setName("fieldContener"); // NOI18N

        javax.swing.GroupLayout fieldContenerLayout = new javax.swing.GroupLayout(fieldContener);
        fieldContener.setLayout(fieldContenerLayout);
        fieldContenerLayout.setHorizontalGroup(
            fieldContenerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 645, Short.MAX_VALUE)
        );
        fieldContenerLayout.setVerticalGroup(
            fieldContenerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 294, Short.MAX_VALUE)
        );

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        txtChat.setColumns(20);
        txtChat.setEditable(false);
        txtChat.setRows(5);
        txtChat.setName("txtChat"); // NOI18N
        jScrollPane1.setViewportView(txtChat);

        txtMessage.setName("txtMessage"); // NOI18N
        txtMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMessageKeyPressed(evt);
            }
        });

        btnSend.setText("Wyślij");
        btnSend.setName("btnSend"); // NOI18N
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        btnClear.setText("Wyczyść Planszę");
        btnClear.setName("btnClear"); // NOI18N
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnReady.setText("Gotowy");
        btnReady.setName("btnReady"); // NOI18N
        btnReady.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadyActionPerformed(evt);
            }
        });

        /*
        cmbChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        */
        cmbChooser.setName("cmbChooser"); // NOI18N
        cmbChooser.setRenderer(new ComboBoxRenderer());
        cmbChooser.setMaximumRowCount(5);
        cmbChooser.setSelectedIndex(0);
        cmbChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReady, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                .addContainerGap(12, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE)
                .addContainerGap(12, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(fieldContener, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(fieldContener, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReady, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSend))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnSend, txtMessage});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReadyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadyActionPerformed
        if (!playingField.areAllPlaced()) {
            JOptionPane.showMessageDialog(this, "Nie ustawiono jeszcze wszystkich statków", "Błąd", JOptionPane.WARNING_MESSAGE);
            return;
        }
        out.println(ShipsProtocol.GAME_READY);
        meReady = true;
        disablePlacers();
        if (!enemyReady) {
            myTurn = true;
        } else {
            myTurn = false;
            play();
        }
    }//GEN-LAST:event_btnReadyActionPerformed

    private void cmbChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbChooserActionPerformed

        JComboBox source = (JComboBox) evt.getSource();
        int selectedShipSize = 0;
        switch (source.getSelectedIndex()) {
            case 0: {
                selectedShipSize = 5;
                break;
            }
            case 1: {
                selectedShipSize = 4;
                break;
            }
            case 2: {
                selectedShipSize = 4;
                break;
            }
            case 3: {
                selectedShipSize = 3;
                break;
            }
            case 4: {
                selectedShipSize = 2;
                break;
            }
            default:
                break;
        }
        playingField.setSelectedShip(source.getSelectedIndex() + 1);
        playingField.setSelectedShipSize(selectedShipSize);
    }//GEN-LAST:event_cmbChooserActionPerformed

    private void txtMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMessageKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER && !txtMessage.getText().isEmpty()) {
            out.println(ShipsProtocol.GAME_MESSAGE_ + txtMessage.getText());
            addMessage("Ty: " + txtMessage.getText() + "\n");
            txtMessage.setText("");

        }
    }//GEN-LAST:event_txtMessageKeyPressed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        if (!txtMessage.getText().isEmpty()) {
            out.println(ShipsProtocol.GAME_MESSAGE_ + txtMessage.getText());
            addMessage("Ty: " + txtMessage.getText() + "\n");
            txtMessage.setText("");
        }
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        playingField.clearPlacements();
    }//GEN-LAST:event_btnClearActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (doWePlay)
            out.println(ShipsProtocol.GAME_END);
    }//GEN-LAST:event_formWindowClosing
    private void play() {
        doWePlay = true;
        addMessage("[INFO] Rozpoczynamy gre! \n");
        if (myTurn) {
            addMessage("[INFO]: Twój ruch\n");
        } else {
            addMessage("[INFO]: Oczekiwanie na ruch przeciwnika...\n");
        }
    }

    private void enemyBoatClicked(java.awt.event.MouseEvent evt) {
        Point p = playingField.getClicked();
        if (p != null && doWePlay && myTurn && playingField.getResult(p) == 0) {

            currentShotX = (int) p.getX();
            currentShotY = (int) p.getY();

            out.println(ShipsProtocol.GAME_HIT_TRY_ + String.valueOf(currentShotX) + ":" + String.valueOf(currentShotY));
            addMessage("[INFO]: Strzał na pozycję " + String.valueOf(currentShotX + 1) + ":" + String.valueOf(currentShotY + 1) + "\n");
        }
    }

    private void disablePlacers() {
        this.btnReady.setEnabled(false);
        this.btnClear.setEnabled(false);
        this.cmbChooser.setEnabled(false);
    }

    private void addMessage(String msg) {
        txtChat.append(msg);
        txtChat.setCaretPosition(txtChat.getText().length());

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnReady;
    private javax.swing.JButton btnSend;
    private javax.swing.JComboBox cmbChooser;
    private javax.swing.JPanel fieldContener;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtChat;
    private javax.swing.JTextField txtMessage;
    // End of variables declaration//GEN-END:variables

    public void connActionPerformed(String message) {
        if (message.startsWith(ShipsProtocol.GAME_MESSAGE_)) {
            String[] list = message.split(":", 3);
            if (list.length > 2) {
                addMessage("Przeciwnik: " + list[2] + "\n");
            }
            return;
        }
        if (message.startsWith(ShipsProtocol.GAME_READY)) {
            enemyReady = true;
            if (meReady) {
                play();
            }
            return;
        }
        if (doWePlay) {
            if (message.startsWith(ShipsProtocol.GAME_HIT_TRY_)) {
                String[] list = message.split(":", 4);
                if (list.length > 3) {
                    int x = Integer.parseInt(list[2]);
                    int y = Integer.parseInt(list[3]);
                    addMessage("[INFO]: Przeciwnik strzela na pozycję " + list[2] + ":" + list[3] + "... ");
                    int hit = playingField.getHit(new Point(x, y));
                    switch (hit) {
                        case 1:
                            addMessage("Trafiony!\n");
                            out.println(ShipsProtocol.GAME_HIT_SUCCESS_ + "alive");
                            myTurn = false;
                            break;
                        case 2:
                            addMessage("Trafiony zatopiony!\n");
                            out.println(ShipsProtocol.GAME_HIT_SUCCESS_ + "flooded");
                            myTurn = false;
                            break;
                        default:
                            addMessage("Pudło\n");
                            out.println(ShipsProtocol.GAME_HIT_MISS);
                            addMessage("[INFO]: Twój ruch\n");
                            myTurn = true;
                            break;
                    }
                    if (playingField.areAllflooded()) {
                        out.println(ShipsProtocol.GAME_ALL_FLOODED);
                        doWePlay = false;
                        JOptionPane.showMessageDialog(rootPane, "Koniec gry - Przegrałeś.", "koniec", JOptionPane.WARNING_MESSAGE);
                    }

                }

                return;
            }
            if (message.startsWith(ShipsProtocol.GAME_ALL_FLOODED)) {
                doWePlay = false;
                JOptionPane.showMessageDialog(rootPane, "Koniec gry - Wygrałeś!!", "koniec", JOptionPane.INFORMATION_MESSAGE);
            }
                if (message.startsWith(ShipsProtocol.GAME_HIT_MISS)) {
                    playingField.setResult(new Point(currentShotX, currentShotY), 2);
                    addMessage("[INFO]: Pudło\n");
                    addMessage("[INFO]: Oczekiwanie na ruch przeciwnika...\n");
                    myTurn = false;
                    return;
                }
                if (message.startsWith(ShipsProtocol.GAME_HIT_SUCCESS_)) {
                    String[] list = message.split(":", 3);
                    if (list.length > 2) {
                        myTurn = true;
                        playingField.setResult(new Point(currentShotX, currentShotY), 1);
                        if (list[2].startsWith("flooded")) {
                            addMessage("[INFO]: Trafiony zatopiony!\n");
                        } else {
                            addMessage("[INFO]: Trafiony !\n");
                        }
                        currentShotX = currentShotY = -1;
                        // addMessage("[INFO]: Oczekiwanie na ruch przeciwnika...\n");
                    }
                    return;
                }
                if(message.startsWith(ShipsProtocol.GAME_END))
                {
                    doWePlay = false;
                    JOptionPane.showMessageDialog(rootPane, "Przeciwnik zakończył grę", "koniec", JOptionPane.WARNING_MESSAGE);
                }
            }
        }



        class ComboBoxRenderer extends JLabel
                implements ListCellRenderer {

            public ComboBoxRenderer() {
                setOpaque(true);
                setHorizontalAlignment(CENTER);
                setVerticalAlignment(CENTER);
            }

            /*
             * This method finds the image and text corresponding
             * to the selected value and returns the label, set up
             * to display the text and image.
             */
            public Component getListCellRendererComponent(
                    JList list,
                    Object value,
                    int index,
                    boolean isSelected,
                    boolean cellHasFocus) {
                //Get the selected index. (The index param isn't
                //always valid, so just use the value.)
                int selectedIndex = ((Integer) value).intValue();

                if (isSelected) {
                    setBackground(list.getSelectionBackground());
                    setForeground(list.getSelectionForeground());
                } else {
                    setBackground(list.getBackground());
                    setForeground(list.getForeground());
                }

                //Set the icon and text.  If icon was null, say so.
                ImageIcon icon = new ImageIcon(playingField.ships[selectedIndex + 1][1]);
                String ship = playingField.SHIP_NAMES[selectedIndex];
                setIcon(icon);
                if (icon != null) {
                    setText(ship);
                    setFont(list.getFont());
                } else {
                    setText("[BRAK OBRAZKA] " + ship);
                }

                return this;
            }
        }
    }
